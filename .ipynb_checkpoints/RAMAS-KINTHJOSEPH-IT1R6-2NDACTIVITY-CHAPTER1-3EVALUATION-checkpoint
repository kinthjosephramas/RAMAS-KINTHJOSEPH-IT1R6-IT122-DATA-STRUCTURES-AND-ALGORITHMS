i. Chapter 1: Introduction to Data Structures and Algorithms (time - frame: 8:00 - 30:35)

  In characteristics of data structure. It's important to should be implemented  correctly and the time complexity must be manage well. Also the space complexity should be small as possible. In execution time, It is very important to manage very well your time in executing. There are three cases which are usually used to compare various data structures execution time in relative manner. It is the worst case, average case and best case. In executing data you must avoid to be in the worst case, and be in the average cast or better in the best case. We really need to learn about the data structure and algorithm. It has a great help in solving things. As time past by and the applications are getting complex and data rich, there are common problems that applications face nowadays. These are data search, processor speed, multiple requests. The application of data structures and algorithms. These are search, sort, insert, update, delete. Search is use for searching an item. Sort items in a certain order. Insert to insert the item in data structure. Update to update the existing item. Delete is used to delete and existing item in data structure. This are the basic terminology in data structures and algorithms. These are data, data item, group items, elementary items, attribute and entity, entity set, field, record, file.  Algorithm is thus a sequence of computational steps that transform the input into an output. Not all procedures can be called an algorithm. An algorithm should have the following characteristics. Algorithm should be unambiguous. Algorithm has input and output. It must be finiteness, feasibility and independet. In writing an algorithm, there are no well-defined standards in writing in it. Rather, it is problem and resource dependent. Algorithms are never written to support a particular programming code.
  
ii. Chapter 1: Introduction to Data Structures and Algorithms (time - frame: 35:00 - end)

     Algorithm analysis, there are two different stages that can be analyzed an efficient algorithm. First it is the Priori analysis, the efficiency of an algorithm is measured by assuming that all other factors. The example of it is processor speed. Second is the Posterior analysis, selected algorithm is implemented by using programming language. Then its execute the target on the computer machine. Its collecting the actual statistics like running time and space required. In algorithm complexity the are two main factors, which decide the efficient of x. These are the time factor and space factor. Time factor its measured by counting the number of key operations such as comparisons in the sorting algorithm. Space factor, it measured by counting maximum memory space required by the algorithm. In local environments setup needs to install python and install pycharm.
  
iii. Chapter 2: Data Structures and Basic Concepts (time - frame: 5:00 - 9:00)

   The built-in data type. These are the data types for which a language has built-in support. Examples of these are integers, boolean, floating, character and string. Integers are for the whole number means a number that is not a fraction. Boolean means true or false. Floating is for decimal numbers. Derive data type. These data types are implementation - independent as they can be implemented in one or another way. These is the data type that is combination of primary or built-in data types and associated operations on them. The examples of these are list, array, stack and queue. The basic operations, data in the data structures are processed by a certain operation. Examples of these are traversing, searching, insertion, deletion, sorting, merging. The class objectives in these chapter are data definition, data object, data type, built-in data type, derived data type and basic operations. In the basic operation there is one example that didn't include in the presentation these is the updating.
   
iv. Chapter 3: Data Structures and Algorithms - Arrays (time - frame: 3:00 - 18: 00)

    Arrays, is a container which can hold a fix number of items and these items should be of the same type. Element and index are the important terms to understand the concept of array. Each item stored in array is called an element. Index is for each location of an element is an array has a numerical index, which is used to identify element. Arrays can be declared in a various ways in different language. The elements index is always start to zero (0). Basic operations of an array. traverse, insertion, deletion, search, update. Traverse it print all array elements one by one. Insertion it adds an element in the given index. Deletion it deletes an element at the given index. Search it searches element using the given index or by the value. Updates an element in the given value. Typecode are the codes that are used to defined the type of value the array will hold. These are the some common typecodes used, b, B, c, i, l, f, d. "b" It represents signed integer of size 1 byte/td>. B, represents unsigned integer of size 1 byte. c represents character size of 1 byte. i represents signed integer of size 2bytes. l represents unsigned integer of size 2 bytes. f represents floating point of size 4 bytes. d represents floating point of size 8 bytes. An array is created in python by importing array module to the python program. As in the presentation the array is being presenting in the code way. When using delete your code must be remove.
    

v. Create your first array project. 

arrayName = array ('1', [10, 20, 30 , 40 ,50])
for x in arrayName:
print (x)